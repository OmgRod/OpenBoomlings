name: Build Axmol Multi-Platform

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            platform: linux
          - os: windows-latest
            platform: windows
          - os: macos-latest
            platform: macos
          - os: ubuntu-latest
            platform: android
          - os: macos-latest
            platform: ios

    steps:
    - name: Checkout repo
      uses: actions/checkout@v4
      with:
        submodules: 'recursive'

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.x'

    - name: Set up CMake
      uses: jwlawson/actions-setup-cmake@v1

    - name: Install Ninja
      uses: seanmiddleditch/gha-setup-ninja@v3

    # Install Linux dependencies (OpenGL libs, nasm, unzip, Java) for Linux and Android
    - name: Install Linux dependencies
      if: matrix.platform == 'linux' || matrix.platform == 'android'
      run: |
        sudo apt-get update
        sudo apt-get install -y libgl1-mesa-dev libglu1-mesa-dev mesa-common-dev nasm unzip openjdk-11-jdk curl libgtk-3-dev

    # Install PowerShell on Linux/macOS if missing (for setup.ps1)
    - name: Install PowerShell (Linux/macOS)
      working-directory: axmol
      if: matrix.platform == 'linux' || matrix.platform == 'android' || matrix.platform == 'macos' || matrix.platform == 'ios'
      run: |
        if ! command -v pwsh &> /dev/null; then
          sudo snap install powershell --classic
        fi

    # Run setup.ps1 to download/build axslcc (Windows)
    - name: Run setup.ps1 (Windows)
      working-directory: axmol
      if: matrix.platform == 'windows'
      shell: powershell
      run: .\setup.ps1

    # Run setup.ps1 to download/build axslcc (Linux/macOS/Android/iOS)
    - name: Run setup.ps1 (Linux/macOS/Android/iOS)
      working-directory: axmol
      if: matrix.platform != 'windows'
      shell: pwsh
      run: ./setup.ps1

    # Windows Build
    - name: Configure and Build Windows
      if: matrix.platform == 'windows'
      run: |
        cmake -S . -B build -G "Visual Studio 17 2022" -A x64 -DCMAKE_BUILD_TYPE=Release
        cmake --build build --config Release

    # Linux Build
    - name: Configure and Build Linux
      if: matrix.platform == 'linux'
      run: |
        cmake -S . -B build -G Ninja -DCMAKE_BUILD_TYPE=Release
        cmake --build build --config Release

    # macOS Build
    - name: Configure and Build macOS
      if: matrix.platform == 'macos'
      run: |
        cmake -S . -B build -G Ninja -DCMAKE_BUILD_TYPE=Release
        cmake --build build --config Release

    # Android SDK and NDK Setup
    - name: Install Android SDK and NDK
      if: matrix.platform == 'android'
      run: |
        export ANDROID_SDK_ROOT=$HOME/android-sdk

        mkdir -p $ANDROID_SDK_ROOT/cmdline-tools
        cd $ANDROID_SDK_ROOT/cmdline-tools
        curl -o commandlinetools.zip https://dl.google.com/android/repository/commandlinetools-linux-9477386_latest.zip
        unzip commandlinetools.zip
        rm commandlinetools.zip
        mv cmdline-tools latest

        yes | $ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager --sdk_root=$ANDROID_SDK_ROOT --licenses
        $ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager --sdk_root=$ANDROID_SDK_ROOT "platform-tools" "platforms;android-30" "ndk;25.1.8937393"

        echo "ANDROID_SDK_ROOT=$ANDROID_SDK_ROOT" >> $GITHUB_ENV
        echo "ANDROID_NDK_ROOT=$ANDROID_SDK_ROOT/ndk/25.1.8937393" >> $GITHUB_ENV

    # Android Build
    - name: Configure and Build Android
      if: matrix.platform == 'android'
      run: |
        cmake -S . -B build_android \
          -G Ninja \
          -DCMAKE_BUILD_TYPE=Release \
          -DANDROID_ABI=arm64-v8a \
          -DANDROID_PLATFORM=android-21 \
          -DCMAKE_TOOLCHAIN_FILE=$ANDROID_NDK_ROOT/build/cmake/android.toolchain.cmake
        cmake --build build_android --config Release

    # iOS Build with signing disabled
    - name: Configure and Build iOS
      if: matrix.platform == 'ios'
      run: |
        cmake -S . -B build_ios \
          -G Xcode \
          -DCMAKE_SYSTEM_NAME=iOS \
          -DCMAKE_OSX_ARCHITECTURES="arm64;x86_64" \
          -DCMAKE_OSX_DEPLOYMENT_TARGET=13.0 \
          -DCMAKE_XCODE_ATTRIBUTE_ONLY_ACTIVE_ARCH=NO

        xcodebuild -project build_ios/Boomlings.xcodeproj \
          -scheme Boomlings \
          -configuration Release \
          -sdk iphoneos \
          CODE_SIGN_IDENTITY="" \
          CODE_SIGNING_REQUIRED=NO \
          DEVELOPMENT_TEAM="" \
          clean build
